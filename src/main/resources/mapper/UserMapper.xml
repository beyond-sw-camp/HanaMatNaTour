<?xml version="1.0" encoding="UTF-8"?>
<!-- mybatis mapper 설정 파일임을 선언한다. -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


<mapper namespace="com.example.demo.src.user.dao.UserMapper">

    <resultMap id="UserResultMap" type="com.example.demo.src.user.domain.User">
        <id property="userId" column="user_id"/>
        <result property="userProvideId" column="user_provide_id"/>
        <result property="userName" column="user_name"/>
        <result property="userEmail" column="user_email"/>
        <result property="role" column="role"/>
        <result property="refreshToken" column="refresh_token"/>
        <result property="expiration" column="expiration"/>
        <result property="provider" column="provider"/>
        <result property="userUUId" column="user_uuid"/>
        <result property="userPassword" column="user_password"/>
    </resultMap>

    <!--save()-->
    <!--    <insert id="save" parameterType="com.example.demo.src.user.domain.User">-->
    <!--        INSERT INTO user(user_name, user_provide_id, user_email, role, refresh_token, expiration)-->
    <!--        VALUES (#{userName}, #{userProvideId} , #{userEmail}, #{role}, #{refreshToken}, #{expiration})-->
    <!--    </insert>-->
    <insert id="save" parameterType="com.example.demo.src.user.domain.User">
        INSERT INTO user(user_name, user_provide_id, user_email,provider,role,user_uuid,user_password)
        VALUES (#{userName}, #{userProvideId} , #{userEmail},#{provider},#{role},#{userUUId},#{userPassword})
    </insert>

    <!-- findByProvideId() -->
    <select id="findByProvideId" parameterType="java.lang.String" resultType="com.example.demo.src.user.domain.User">
        SELECT user_provide_id, user_name, user_email, role
        FROM user
        WHERE user_provide_id = #{userProvideId}
    </select>

    <!--findBYId()-->
    <select id="findById" parameterType="java.lang.Long" resultType="com.example.demo.src.user.domain.User">
        SELECT user_id, user_provide_id, user_name, user_email, role
        FROM user
        WHERE user_id = #{userId}
    </select>

    <!--isExistByEmail-->
    <select id="isExistByEmail" parameterType="java.lang.String" resultType="boolean">
        SELECT COUNT(*)
        FROM User
        WHERE user_email = #{userEmail}
    </select>

    <!-- isExistByRefresh -->
    <select id="isExistByRefresh" parameterType="string" resultType="boolean">
        SELECT COUNT(*)
        FROM User
        WHERE refresh_token = #{refreshToken}
    </select>

    <select id="isExistByProvideId" parameterType="string" resultType="boolean">
        SELECT COUNT(*)
        FROM User
        WHERE user_provide_id = #{userProvideId}
    </select>

    <!-- deleteByRefresh() -->
    <delete id="deleteByRefresh" parameterType="java.lang.String">
        DELETE FROM User WHERE refresh_token = #{refreshToken}
    </delete>

    <!-- deleteByProvideId() -->
    <delete id="deleteByProvideId" parameterType="string">
        DELETE FROM User WHERE user_provide_id = #{userProvideId}
    </delete>


    <!-- updateRole -->
    <update id="updateRole">
        UPDATE User
        SET role = #{role}
        WHERE user_provide_id = #{userProvideId}
    </update>

    <update id="updateRefreshToken">
        UPDATE User
        SET refresh_token =  #{refreshToken}, expiration = #{expiration}
        WHERE user_provide_id = #{userProvideId}
    </update>


    <select id="findByEmailAndPassword" resultMap="UserResultMap">
        select *
        from user where user_email=#{userEmail} and user_password=#{userPassword}
    </select>

    <select id="findByUserUUID" resultMap="UserResultMap">
        select *
        from user where user_uuid=#{userUUID}
    </select>

</mapper>