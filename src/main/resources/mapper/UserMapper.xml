<?xml version="1.0" encoding="UTF-8"?>
<!-- mybatis mapper 설정 파일임을 선언한다. -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


<mapper namespace="com.example.demo.src.user.dao.UserMapper">

    <!--save()-->
    <insert id="save" parameterType="com.example.demo.src.user.domain.User">
        INSERT INTO user(userName, userProvideId, userNickname, userEmail, role, refreshToken, expiration)
        VALUES (#{userName},#{userProvideId} , #{userNickname}, #{userEmail}, #{role}, #{refreshToken}, #{expiration})
    </insert>
    <!--
        save() 할 떄
            - sns로부터 받는 정보 철
            - 그 정보에 닉네임 + 권한 얹기
            - 그걸 저장하기
        -> 이거 어떻게 매핑할지 생각해보기 (각각 dto만든다음 최종 dto에 합쳐 넣을까 ??)
    -->

    <!-- findByProvideId() -->
    <select id="findByProvideId" parameterType="java.lang.String" resultType="com.example.demo.src.user.domain.User">
        SELECT userProvideId, userName, userNickname, userEmail, role
        FROM user
        WHERE userProvideId = #{userProvideId}
    </select>

    <!--findBYId()-->
    <select id="findById" parameterType="java.lang.Long" resultType="com.example.demo.src.user.domain.User">
        SELECT userId, userProvideId, userName, userNickname, userEmail, role
        FROM user
        WHERE userId = #{userId}
    </select>
    <!--findByUserNickname()-->
    <select id="findByNickname" parameterType="java.lang.String" resultType="com.example.demo.src.user.domain.User">
        SELECT userProvideId, userName, userNickname, userEmail, role
        FROM user
        WHERE userNickname = #{userNickname}
    </select>
    <!--deleteByNickname()-->
    <delete id="deleteByNickname" parameterType="java.lang.String">
        DELETE FROM user WHERE userNickname = #{userNickname}
    </delete>
    <!--isExistByNickname()-->
    <select id="isExistByNickname" parameterType="java.lang.String" resultType="boolean">
        SELECT COUNT(*)
        FROM User
        WHERE userNickname = #{userNickname}
    </select>
    <!--isExistByEmail-->
    <select id="isExistByEmail" parameterType="java.lang.String" resultType="boolean">
        SELECT COUNT(*)
        FROM User
        WHERE userEmail = #{userEmail}
    </select>

    <!-- isExistByRefresh -->
    <select id="isExistByRefresh" parameterType="string" resultType="boolean">
        SELECT COUNT(*)
        FROM User
        WHERE refreshToken = #{refreshToken}
    </select>

    <select id="isExistByProvideId" parameterType="string" resultType="boolean">
        SELECT COUNT(*)
        FROM User
        WHERE userProvideId = #{userProvideId}
    </select>

    <!-- deleteByRefresh() -->
    <delete id="deleteByRefresh" parameterType="java.lang.String">
        DELETE FROM User WHERE refreshToken = #{refreshToken}
    </delete>

    <!-- deleteByProvideId() -->
    <delete id="deleteByProvideId" parameterType="string">
        DELETE FROM User WHERE userProvideId = #{userProvideId}
    </delete>

    <!-- updateNickname() -->
    <update id="updateNickname">
        UPDATE User
        SET userNickname = #{userNickname}
        WHERE userProvideId = #{userProvideId}
    </update>

    <!-- updateRole -->
    <update id="updateRole">
        UPDATE User
        SET role = #{role}
        WHERE userProvideId = #{userProvideId}
    </update>

</mapper>