<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.src.foodlist.repository.ListMapper">

    <resultMap id="userResultMap" type="com.example.demo.src.foodlist.model.User">
        <id property="id" column="user_id" />
        <id property="userUuid" column="user_uuid" />
        <result property="userName" column="userName" />
    </resultMap>

    <resultMap id="storeResultMap" type="com.example.demo.src.store.model.Store">
        <id property="storeId" column="store_id" />
        <result property="storeName" column="store_name" />
        <result property="storeAddress" column="store_address" />
        <result property="category" column="category" />
        <result property="likeCount" column="like_count" />
    </resultMap>

    <resultMap id="foodListResultMap" type="com.example.demo.src.foodlist.model.FoodList">
        <id property="foodlistId" column="foodlist_id"/>
        <result property="foodlistName" column="foodlist_name"/>
        <result property="ListLikeCount" column="like_count"/>
        <result property="enrolldate" column="foodlist_enroll_date"/>
        <association property="user" javaType="com.example.demo.src.foodlist.model.User" resultMap="userResultMap" />
        <association property="store" javaType="com.example.demo.src.store.model.Store" resultMap="storeResultMap" />
    </resultMap>

    <!-- id/ 하나 이상의 id 요소를 정의하여 주 키나 고유 식별자 정의 -->
    <!-- result/ 하나 이상의 result요소를 정의하여 매핑된 객체의  속성을 정의-->

    <!-- association/ 다른 객체나 resultMap과의 연관관계를 정의-->
    <!-- collection/ 연관된 컬렉션을 정의 -->
    <!-- descriminator/ 타입을 구분하느데 사용되는 분기를 정의 -->




    <!-- User별 FoodList 조회 -->
    <select id="getFoodListsByUser" resultMap="foodListResultMap">
        SELECT *
        FROM foodlist f
                 LEFT OUTER JOIN user u ON u.user_uuid = f.user_uuid
        WHERE u.userName = #{userName};
    </select>
    <!-- User별 FoodList 전체 개수 조회 -->
    <select id="getTotalCountByUser" resultType="_int">
        SELECT COUNT(*)
        FROM foodlist
        WHERE user_uuid = #{userUuid}
    </select>


    <!--     FoodList별 상세 조회-->
    <select id="getFoodListById" resultMap="foodListResultMap">
        SELECT f.foodlist_id,
               f.foodlist_name,
               f.store_id,
               s.store_name,
               s.store_address,
               s.category
        FROM foodlist f
                 LEFT OUTER JOIN store s ON s.store_id = f.store_id
        WHERE f.foodlist_id = #{foodlistId};
    </select>


    <!-- 수정을 위해 조회하기 -->
    <!--    <select id="findFoodListById" resultType="com.example.demo.src.foodlist.model.FoodList">-->
    <!--        SELECT foodlist_id ,-->
    <!--               foodlist_name ,-->
    <!--               foodlist_enroll_date-->
    <!--        FROM foodlist-->
    <!--        WHERE foodlist_id = #{foodlistId}-->
    <!--    </select>-->

    <!-- FoodList 수정 -->
    <update id="updateFoodList" parameterType="com.example.demo.src.foodlist.model.FoodList">
        UPDATE foodlist
        SET   foodlist_name = #{foodlistName}
        WHERE foodlist_id = #{foodlistId}
    </update>


    <!-- FoodList 삭제 -->
    <delete id="deleteFoodListById">
        DELETE FROM foodlist
        WHERE foodlist_id = #{foodlistId}
    </delete>
</mapper>